<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.4" reference="GitLab.Code.CI.GitLabCIStatusMacro" locale="">
  <web>GitLab.Code.CI</web>
  <name>GitLabCIStatusMacro</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>GitLabCIStatusMacro</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>
{{velocity}}
$services.localization.render('GitLab.Code.CI.GitLabCIStatusMacro.description', ["[[$services.localization.render('GitLab.Code.CI.GitLabCIStatusMacro.description.administrationPanelLinkTitle')&gt;&gt;path:$xwiki.getURL('XWiki.XWikiPreferences', 'admin')?editor=globaladmin&amp;section=GitLab%20CI]]"])
{{/velocity}}

==Usage==
{{code}}
  {{gitlabcistatus /}}
{{/code}}

==Example==
{{gitlabcistatus /}}
</content>
  <object>
    <name>GitLab.Code.CI.GitLabCIStatusMacro</name>
    <number>0</number>
    <className>XWiki.WikiMacroClass</className>
    <guid>a8ad9a64-951d-42fa-a5b6-287b573a184e</guid>
    <class>
      <name>XWiki.WikiMacroClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <async_cached>
        <defaultValue>0</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType/>
        <name>async_cached</name>
        <number>12</number>
        <prettyName>Cached</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </async_cached>
      <async_context>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>1</multiSelect>
        <name>async_context</name>
        <number>13</number>
        <prettyName>Context elements</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator>, </separator>
        <separators>|, </separators>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <values>action=Action|doc.reference=Document|icon.theme=Thème des icônes|locale=Langue|rendering.defaultsyntax=Default syntax|rendering.restricted=Restricted|rendering.targetsyntax=Target syntax|request.base=URL de base pour la requête|request.parameters=Paramètres de la requête|request.url=URL de la requête|request.wiki=Wiki de la requête|user=Utilisateur|wiki=Wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </async_context>
      <async_enabled>
        <defaultValue>0</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType/>
        <name>async_enabled</name>
        <number>11</number>
        <prettyName>Asynchronous rendering</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </async_enabled>
      <code>
        <disabled>0</disabled>
        <editor>Text</editor>
        <name>code</name>
        <number>10</number>
        <prettyName>Macro code</prettyName>
        <rows>20</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentDescription>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>contentDescription</name>
        <number>9</number>
        <prettyName>Content description (Not applicable for "No content" type)</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </contentDescription>
      <contentJavaType>
        <cache>0</cache>
        <defaultValue>Unknown</defaultValue>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <freeText>allowed</freeText>
        <largeStorage>1</largeStorage>
        <multiSelect>0</multiSelect>
        <name>contentJavaType</name>
        <number>8</number>
        <picker>1</picker>
        <prettyName>Macro content type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator>|</separator>
        <separators>|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>Unknown|Wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentJavaType>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>7</number>
        <prettyName>Macro content availability</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator>|</separator>
        <separators>|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>Optional|Mandatory|No content</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <defaultCategory>
        <disabled>0</disabled>
        <name>defaultCategory</name>
        <number>4</number>
        <prettyName>Default category</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultCategory>
      <description>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>description</name>
        <number>3</number>
        <prettyName>Macro description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <id>
        <disabled>0</disabled>
        <name>id</name>
        <number>1</number>
        <prettyName>Macro id</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </id>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>2</number>
        <prettyName>Macro name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <supportsInlineMode>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>supportsInlineMode</name>
        <number>5</number>
        <prettyName>Supports inline mode</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </supportsInlineMode>
      <visibility>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>visibility</name>
        <number>6</number>
        <prettyName>Macro visibility</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator>|</separator>
        <separators>|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>Current User|Current Wiki|Global</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </visibility>
    </class>
    <property>
      <async_cached>0</async_cached>
    </property>
    <property>
      <async_context/>
    </property>
    <property>
      <async_enabled>0</async_enabled>
    </property>
    <property>
      <code>{{groovy}}
import groovy.json.*;

def getContentFromURL(url, authHeader, authorization) {
   try {
      def pageURL = new URL(url)
      def conn = pageURL.openConnection()
      if (authorization!=null &amp;&amp; !authorization.isEmpty()) {
        conn.setRequestProperty(authHeader, authorization);
      }
      if(conn.responseCode == 200) {
        def jsonSlurper = new JsonSlurper()
        return jsonSlurper.parseText(conn.content.text);
      } else if (conn.responseCode == 401) {
        println "|(% colspan=99 %) ${services.localization.render('GitLab.Code.CI.GitLabCIStatusMacro.authorizationError', [url])}"
        return null;
      } else {
        println "|(% colspan=99 %) ${services.localization.render('GitLab.Code.CI.GitLabCIStatusMacro.badResponseCodeError', [url, conn.responseCode])}"
        return null;
      }
    } catch (e) {
      println "|(% colspan=99 %) ${services.localization.render('GitLab.Code.CI.GitLabCIStatusMacro.genericError', [url])}"
      println e
      return null;
   }
 }

def getHash(extId) {
 def hash = ""
 def ext = services.extension.installed.getInstalledExtension(extId, "wiki:xwiki")
 if (ext==null)
   return [ hash : "", installDate : ""]
 def exts = ext.toString().split("-")
 hash = exts[exts.length-1]
 installDate = ext.getInstallDate("wiki:xwiki")
 return [ hash: hash, installDate : installDate]
}

def displayExtensionInfo(extId, projectURL, branchName, pipeLineURL, authHeader, authorization) {
 def res = getHash(extId)
 def lastCommit = getLastCommit(projectURL, branchName, res.hash, authHeader, authorization)
 if (lastCommit==null) {
  println """|= ${extId} | ${res.hash} | ${res.installDate} | ${services.localization.render('GitLab.Code.CI.GitLabCIStatusMacro.commitNotFound')} | [[${services.localization.render('GitLab.Code.CI.GitLabCIStatusMacro.pipelineLinkTitle')}&gt;&gt;url:${pipeLineURL}]]"""
 } else {
 def isLastCommit = res.hash!="" &amp;&amp; lastCommit.sha.startsWith(res.hash)
 def lastCommitUrl = "[[${services.localization.render('GitLab.Code.CI.GitLabCIStatusMacro.lastCommitLinkTitle')}&gt;&gt;url:${lastCommit.url}]]"
 if (isLastCommit)
  println """|= ${extId} | ${res.hash} | ${res.installDate} |(((${services.localization.render('GitLab.Code.CI.GitLabCIStatusMacro.lastCommitInstalled', [lastCommitUrl, lastCommit.message, lastCommit.author, lastCommit.date])}))) | [[${services.localization.render('GitLab.Code.CI.GitLabCIStatusMacro.pipelineLinkTitle')}&gt;&gt;url:${pipeLineURL}]]"""
 else
  println """|= ${extId} | ${res.hash} | ${res.installDate} |(% style="color: red" %)(((${services.localization.render('GitLab.Code.CI.GitLabCIStatusMacro.lastCommitNotInstalled', [lastCommitUrl, lastCommit.message, lastCommit.author, lastCommit.date])})))| [[${services.localization.render('GitLab.Code.CI.GitLabCIStatusMacro.pipelineLinkTitle')}&gt;&gt;url:${pipeLineURL}]]"""
 }
}

def getLastCommit(projectURL, branchName, hash, authHeader, authorization) {
 if (projectURL.contains("github.com")) {
 def url = "${projectURL}git/matching-refs/heads/${branchName}"
 def headRef = getContentFromURL(url, authHeader, authorization)
 if (request.debug) {
   println url
   println headRef
 }
  if (headRef==null || headRef[0]==null)
   return null;
 def commitURL = headRef[0].object.url
 def commit = getContentFromURL(headRef[0].object.url, authHeader, authorization)
 if (commit==null)
   return null
 return [ sha: commit.sha, message : commit.message, author: commit.author.name, date: commit.author.date, url: commit.html_url]
 } else {
 def url = "${projectURL}repository/branches/${branchName}"
 def headRef = getContentFromURL(url, authHeader, authorization)
 if (request.debug) {
   println url
   println headRef
 }
  if (headRef==null || headRef.commit==null)
   return null;
 def commitId= headRef.commit.id
 def commit = getContentFromURL("${projectURL}/repository/commits/${commitId}", authHeader, authorization)
 if (commit==null)
   return null
 return [ sha: commit.id, message : commit.message, author: commit.author_name, date: commit.authors_date, url: commit.web_url]
 }
}

def displayExtensionInfoFromDoc (gitLabConfigDoc) {
  def extId = gitLabConfigDoc.getValue("extensionid")
  def projectId = gitLabConfigDoc.getValue("projectid")
  def branchName = gitLabConfigDoc.getValue("branchname")
  def pipeLineURL = gitLabConfigDoc.getValue("pipelineurl")
  def projectURL = null
  def authHeader = null
  def authorization = null
  def url = gitLabConfigDoc.getValue("projecturl")
  // Case of github server
  if (url.contains("github")) {
    projectURL = "https://api.github.com/repos/" + projectId + "/"
    authHeader = "Authorization"
    def credentials = gitLabConfigDoc.getValue("projectauth").split(":")
    def clientId = credentials[0]
    def secret = credentials[1]
    authorization = "Basic " + "${clientId}:${secret}".getBytes().encodeBase64().toString()
  } else {
    // Case of gitlab server
    projectURL = "https://git.xwikisas.com/api/v4/projects/" + projectId + "/"
    authHeader = "PRIVATE-TOKEN"
    authorization = gitLabConfigDoc.getValue("projectauth")
  }
  displayExtensionInfo(extId, projectURL, branchName, pipeLineURL, authHeader, authorization)
}

println "|= ${services.localization.render('GitLab.Code.CI.GitLabCIStatusMacro.extensionId')} |= ${services.localization.render('GitLab.Code.CI.GitLabCIStatusMacro.installed')} |= ${services.localization.render('GitLab.Code.CI.GitLabCIStatusMacro.installationDate')}  |= ${services.localization.render('GitLab.Code.CI.GitLabCIStatusMacro.commitInformation')} |= ${services.localization.render('GitLab.Code.CI.GitLabCIStatusMacro.pipeline')}"

def gitLabConfigDoc = xwiki.getDocument("GitLab.Code.CI.GitLabConfig")
for (object in gitLabConfigDoc.getObjects("GitLab.Code.CI.GitLabConfigClass")) {
  gitLabConfigDoc.use(object)
  displayExtensionInfoFromDoc(gitLabConfigDoc)
}
{{/groovy}}</code>
    </property>
    <property>
      <contentDescription/>
    </property>
    <property>
      <contentJavaType/>
    </property>
    <property>
      <contentType>No content</contentType>
    </property>
    <property>
      <defaultCategory/>
    </property>
    <property>
      <description>Displays status of git CI</description>
    </property>
    <property>
      <id>gitlabcistatus</id>
    </property>
    <property>
      <name>GitLab CI Status</name>
    </property>
    <property>
      <supportsInlineMode>0</supportsInlineMode>
    </property>
    <property>
      <visibility>Current Wiki</visibility>
    </property>
  </object>
</xwikidoc>
